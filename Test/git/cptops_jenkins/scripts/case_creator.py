#!/usr/bin/python
'''
CPT bulk case creator program.

This program creates GUS cases in bulk using a set of predefined paramenters in the case_presets.json.
The data from the json file is used to build the command string to perform BP queries.

'''

import json
import logging
import shlex
import os
import subprocess
from subprocess import PIPE, Popen
import re
import sys
import argparse
import pprint
import case_opts as co


def preset_import():
    '''
    Imports case_presets.json
    '''
    presets = os.environ["HOME"] + "/git/cptops_jenkins/scripts/case_presets.json"
    with open(presets, 'r') as pre:
        sets = json.load(pre)
    return sets

def initfile():
    '''
    Creates cases.sh file which stores the Build_plan commands.
    :return:
    '''
    with open('cases.sh', 'w') as f:
        f.write('#' * 86 + '\n')
        f.write("#This file is generated by 'CPT case create automation' , please don't edit manually#\n")
        f.write('#' * 86 + '\n')

def dryrun():
    if not options.dryrun:
        failures = case_executor()
        if failures:
            for fail in failures:
                logging.debug(str(fail) + " failed to generate implementation plans.")
            sys.exit(1)

def list_roles(sets):
    '''
    Functions that list all the roles(roleclasses) in the case_presets.json
    :param sets:
    :return:
    '''
    role_list = []
    for key in sets.iterkeys():
        role_list.append(str(key))
    role_list.sort()
    print "Roles:"
    for item in role_list:
        print item
    print "\nTotal Roles: %s" % (len(role_list))
    sys.exit(0)

def find_role(sets):
    '''
    Function that takes a string to search case_presets.json for matches.
    :param sets:
    :return:
    '''
    results = []
    role_search = re.compile(r'%s' % options.search_role)
    for key in sets.iterkeys():
        if role_search.findall(key):
            results.append(str(key))
    if not results:
        print "No Roles found matching that name."
        sys.exit(1)
    else:
        for result in results:
            print result
        return results


def array_builder(role, sets, r_class=False):
    '''
     Function that builds the gen_cases.py build command. It gathers options from
    the case_presets and builds the command.
    :param role:
    :param sets:
    :param r_class:
    :return:
    '''
    bld_cmd = {}
    role_status = role.split('_')[-1].upper()
    home_dir = os.environ["HOME"]

    # Standard presets
    bld_cmd['status'] = "True" if role_status == "DR" else "FALSE"
    bld_cmd['patchset'] = options.bundle
    bld_cmd['infra'] = sets[role][role_status]['INFRA']
    bld_cmd['role'] = sets[role][role_status]['ROLE']
    bld_cmd['dowork'] = options.dowork
    bld_cmd['no_host_validation'] = options.no_host
    bld_cmd['auto_close_case'] = options.auto_close_case
    bld_cmd['nolinebacker'] = options.nolinebacker

    #Customizable presets
    bld_cmd['podgroup'] = options.podgroup if options.podgroup != None else \
            home_dir + "/git/cptops_case_gen/hostlists/" \
            + sets[role][role_status]['PODGROUP']
    bld_cmd['gsize'] = options.groupsize if options.groupsize != None else \
            sets[role][role_status]['GROUPSIZE']
    bld_cmd['tagsize'] = options.taggroups if options.taggroups != None else \
            sets[role][role_status]['TAGGROUPS']
    bld_cmd['template'] = options.template if options.template != None else \
            sets[role][role_status]['TEMPLATEID']
    bld_cmd['hostopstat'] = sets[role][role_status]['HO_STATUS'] if sets[role][role_status].has_key('HO_STATUS') else \
            options.hoststat
    bld_cmd['clusteropstat'] = sets[role][role_status]['CL_STATUS'] if sets[role][role_status].has_key('CL_STATUS') else \
            options.cluststat
    bld_cmd['regexfilter'] = sets[role][role_status]['REGEX'] if sets[role][role_status].has_key('REGEX') else \
            options.regex
    bld_cmd['hostpercent'] = sets[role][role_status]['HOSTPERCENT'] if sets[role][role_status].has_key('HOSTPERCENT') else \
            options.hostpercent

    #Call special filter functions
    bld_cmd = spec_presets(sets, bld_cmd, role, role_status)
    if options.datacenter:
        bld_cmd = rebuild_hostlist(bld_cmd)

    logging.debug("GROUPSIZE = " + str(bld_cmd['gsize']))
    logging.debug("TEMPLATEID = " + str(bld_cmd['template']))
    logging.debug("TAGGROUPS = " + str(bld_cmd['tagsize']))
    logging.debug("INFRA = " + bld_cmd['infra'])
    logging.debug("ROLE = " + bld_cmd['role'])
    logging.debug("SUBJECT = " + bld_cmd['subject'])
    logging.debug("PODGROUP = " + bld_cmd['podgroup'])
    logging.debug("REGEXFILTER = " + bld_cmd['regexfilter'])
    logging.debug("FILTER = " + bld_cmd['filter'])
    logging.debug("PATCHSET = " + bld_cmd['patchset'])
    logging.debug("HOSTPERCENT = " + bld_cmd['hostpercent'])
    logging.debug("Contents of uploaded file %s" % bld_cmd['podgroup'])
    with open(bld_cmd['podgroup'], 'r') as fin:
        print fin.read()
    case_builder(bld_cmd)

def spec_presets(sets, bld_cmd, role, role_status):
    '''
    Function that handles preset values that require user input or additional info.
    :param sets:
    :param bld_cmd:
    :param role:
    :param role_status:
    :return:
    '''
    #Takes pool percentage to calculate host count per block
    if bld_cmd['role'] == 'app' and options.hostpercent == 'None':
        flag = raw_input("\n Do you want to give pool percentage[y|n] :")
        if flag.lower() == 'y':
            options.hostpercent = raw_input("\nPreset requires min pool percentage. eg 33 : ")
        else:
            options.hostpercent = 'None'
    bld_cmd['hostpercent'] = options.hostpercent

    # Logic to get Filter information
    if options.filter is None and 'FILTER' in sets[role][role_status]:
        length = len(sets[role][role_status]['FILTER'])
        #if len(sets[role][role_status]['FILTER']) == 1 or len(sets[role][role_status]['FILTER']) == 2:
        if length == 1:
            bld_cmd['filter'] = ",".join(sets[role][role_status]['FILTER'][0:length])
        else:
            for role_filter in sets[role][role_status]['FILTER']:
                print role_filter
            bld_cmd['filter'] = raw_input("Please select filter from above: ")
    else:
        bld_cmd['filter'] = ""

    # Logic to get Subject information
    if options.subject == None:
        if options.roleclass in co.req_sub:
            if not options.subject:
                options.subject = raw_input("\nPreset %s requires custom subject.\nPlease add subject line: " \
                                            % options.roleclass)
        elif options.canary:
            options.subject = "CANARY"
        elif 'SUBJECT' in sets[role][role_status].keys():
            options.subject = sets[role][role_status]['SUBJECT']
        else:
            options.subject = ""
    bld_cmd['subject'] = options.subject

    # Custom parameters within the case_presets.json
    # These options are not within each predefined role.
    # So we test if values are present.
    for key in ['CASETYPE', 'IMPL_PLAN', 'EXCLUDES', 'LIST_FILTER']:
        if key in sets[role][role_status]:
            if key == 'EXCLUDES':
                bld_cmd[str.lower(key)] = "hostlists/" + sets[role][role_status][key]
            else:
                bld_cmd[str.lower(key)] = sets[role][role_status][key]
    return bld_cmd

def rebuild_hostlist(bld_cmd):
    '''
    This functions rebuilds a hostlist with only the specified datacenters. Useful when
    you only want to create cases for a specific DC.
    :param bld_cmd:
    :return:
    '''
    if isinstance(options.datacenter, list):
        dcs = options.datacenter
    else:
        dcs = options.datacenter.split(',')

    newfile = open("newfile.txt", "w")
    with open(bld_cmd['podgroup'], 'r') as hostlist:
        for line in hostlist:
            for dc in dcs:
                dc_reg = re.compile(r'(.*%s.*)' % dc.upper())
                result = dc_reg.search(line)
                if result:
                    newfile.write(result.group() + "\n")
    newfile.close()
    bld_cmd['podgroup'] =  "newfile.txt"
    return bld_cmd

def case_builder(bld_cmd):
    '''
    Function that extracts information from case_presets.json. Builds the
    pod_cases.py command string.
    '''
    cmd = ''
    case_file = 'cases.sh'
    pod_cmd = ["python", os.environ["HOME"] + "/git/cptops_case_gen/gen_cases.py" ]
    for opt in co.opt_dict.iterkeys():
        if bld_cmd.has_key(opt) and bld_cmd[opt] != "":
            if opt == 'no_host_validation' and bld_cmd['no_host_validation'] != '':
                pod_cmd.append(co.opt_dict[opt])
                continue
            pod_cmd.append(co.opt_dict[opt])
            pod_cmd.append(str(bld_cmd[opt]))
    for item in pod_cmd:
        cmd += str(item)
        cmd += " "
    logging.debug(cmd)
    file_proc = subprocess.Popen(pod_cmd, stdout=subprocess.PIPE)
    with open(case_file, 'a+') as cases:
        cases.write(file_proc.stdout.read())

def case_executor():
    '''
    Functions that loops thru cases.sh to create implementation plans and
    gus cases. Gus_cases.py requires proxy setting while build_plan.py
    does not require proxy setting. Hence the loop.
    '''
    case_file = os.getcwd() + '/cases.sh'
    cmd_type = re.compile(r'^(python\s[a-z_.]*)')
    pods = re.compile(r'(?<=\"datacenter\":\s)\"(...)\"|(?<=\"clusters\"\:\s)\"(.*?)\"')
    #pods = re.compile(r'--inst\s([A-Za-z0-99,]*)\s.*-D\s(...)')
    os.chdir(os.environ["HOME"] + '/git/cptops_case_gen')
    failed_plans = []

    if os.path.isfile(case_file):
        with open(case_file, 'r') as cases:
            for line in cases:
                if not line.startswith("#"):
                    ln_check = cmd_type.match(line)
                    if ln_check.group() == "python gus_cases_vault.py":
                        #os.environ['https_proxy'] = "http://public-proxy1-0-sfm.data.sfdc.net:8080/"
                        #logging.debug(line)
                        #retcode = os.system(line)
                        #logging.debug(retcode)
                        #if retcode != 0:
                            #pods_match = pods.findall(line)
                            #logging.debug(pods_match)
                            #failed_plans.append(pods_match)
                        continue
                    else:
                        #os.environ['https_proxy'] = ""
                        logging.debug(line)
                        retcode = os.system(line)
                        logging.debug(retcode)
                        if retcode != 0:
                            pods_match = pods.findall(line)
                            logging.debug(pods_match.group(1))
                            failed_plans.append(pods_match(1))
    else:
        logging.debug("cases.sh file not found!")
        logging.debug(case_file)
        sys.exit(1)
    return failed_plans


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Case Builder Program    ')
    group1 = parser.add_argument_group('Standard Options')
    group2 = parser.add_argument_group('Customizable Presets')
    group3 = parser.add_argument_group('Search/View')
    group1.add_argument("--dry-run", action="store_true", dest="dryrun",
                        help="Dry run of build no case will be generated.")
    group1.add_argument("-d", "--dc", dest="datacenter", help="Specify datacenter(s) to create cases")
    group1.add_argument("--no_host_validation", dest="no_host", action="store_true",
                        help="Flag to skip verify remote hosts")
    group1.add_argument("--auto_close_case", dest="auto_close_case", action="store_true", default=True,
                        help="To close the cases during execution")
    group1.add_argument("--nolinebacker", dest="nolinebacker", action="store_true", default=False,
                        help="Do not use Linebacker")
    group1.add_argument("-r", "--roleclass", dest="roleclass", help="Preset Role name")
    group1.add_argument("-b", "--bundle", dest="bundle", default="current", help="Patch Bundle (default: current)")
    group1.add_argument("--dowork", dest="dowork", default="all_updates", help="Task to perform (default: all_updates)")
    group1.add_argument("--hostpercent", dest="hostpercent", default="None", help="Host percentage for core app")
    group1.add_argument("--canary", dest="canary", action="store_true", help="All canary cases")
    group2.add_argument("-t", "--template", dest="template", help="Template filename")
    group2.add_argument("-p", "--podgroup", dest="podgroup", help="Hostlist filemame")
    group2.add_argument("-g", "--groupsize", dest="groupsize", help="Groupsize")
    group2.add_argument("--taggroups", dest="taggroups", help="Taggroups")
    group2.add_argument("--subject", dest="subject", help="Subject")
    group2.add_argument("--clusstat", dest="cluststat", default="", help="Cluster Operational Status.")
    group2.add_argument("--hoststat", dest="hoststat", default="", help="Host Operational Status.")
    group2.add_argument("--regex", dest="regex", default="", help="Regex Filter")
    group2.add_argument("--filter", dest="filter", help="Filter")
    group3.add_argument("-l", "--list", action="store_true", dest="list", help="List all available roles presets.")
    group3.add_argument("--view", dest="full_list", help="View full presets values.")
    group3.add_argument("-s", "--search", dest="search_role", help="Search for a role.")
    options = parser.parse_args()

    initfile()  # function to clean existing cases.sh file
    logging.basicConfig(level=logging.DEBUG)
    sets = preset_import()

    if options.full_list:
        if isinstance(options.full_list, list):
            roles = options.full_list
        else:
            roles = options.full_list.split(',')
        for role in roles:
            pp = pprint.PrettyPrinter(indent=2)
            print("\nPresets contents for {}".format(role))
            print("=====================================================")
            try:
                pp.pprint(sets[role])
            except KeyError:
                logging.error("No such role {} in presets.".format(role))
                sys.exit(1)
        sys.exit(0)
    if options.search_role:
        find_role(sets)
    if options.list:
        list_roles(sets)
    if options.datacenter and options.roleclass:
        if isinstance(options.roleclass, list):
            roles = options.roleclass
        else:
            roles = options.roleclass.split(',')
        for role in roles:
            array_builder(role, sets)
            dryrun()
        sys.exit(0)
    if options.roleclass:
        if isinstance(options.roleclass, list):
            roles = options.roleclass
        else:
            roles = options.roleclass.split(',')
        for role in roles:
            array_builder(role, sets)
            dryrun()
